import 'dart:io';
import 'dart:typed_data';

import 'package:art_images_generator/api_services.dart';
import 'package:art_images_generator/art_screen.dart';
import 'package:art_images_generator/colors.dart';
import 'package:art_images_generator/hexcolor.dart';
import 'package:art_images_generator/signin.dart';
import 'package:art_images_generator/signup.dart';
import 'package:avatar_glow/avatar_glow.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';
import 'package:speech_to_text/speech_to_text.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  var sizes = ["Small", "Medium", "Large"];
  var values = ["256x256", "512x512", "1024x1024"];
  String? dropValue;
  var texController = TextEditingController();
  String image = '';
  var isLoaded = false;
  var isListen = false;
  SpeechToText speechToText = SpeechToText();
  ScreenshotController screenshotController = ScreenshotController();
  downloadingImg() async {
    var result = await Permission.manageExternalStorage.request();
    if (result.isGranted) {
      const foldername = "AI_Image";
      final path = Directory("storage/emulated/0/$foldername");
      final filename = "${DateTime.now().millisecondsSinceEpoch}.png";
      if (await path.exists()) {
        await screenshotController.captureAndSave(path.path,
            delay: const Duration(
              milliseconds: 100,
            ),
            fileName: filename,
            pixelRatio: 1.0);

        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text("Downloaded to ${path.path}"),
        ));
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text("path dooes not exist"),
        ));
        await path.create();
        await screenshotController.captureAndSave(path.path,
            delay: const Duration(
              milliseconds: 100,
            ),
            fileName: filename,
            pixelRatio: 1.0);

        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text("Downloaded${path.path}"),
        ));
      }
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(" Permission Denied")));
    }
  }

  shareImage() async {
    await screenshotController
        .capture(delay: Duration(milliseconds: 100), pixelRatio: 1.0)
        .then((Uint8List? img) async {
      if (img != null) {
        final directory = (await getApplicationDocumentsDirectory()).path;
        final filename = "share.png";
        final imgpath = await File("$directory/$filename").create();
        await imgpath.writeAsBytes(img);
        Share.shareFiles([imgpath.path], text: "Generated by  AI ");
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text("Failed to send image"),
        ));
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: Drawer(
    
        child: ListView(
         
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              padding: EdgeInsets.zero,
              child: UserAccountsDrawerHeader(
                decoration: BoxDecoration(
                    color: Color.fromARGB(1000, 94, 97, 244),
                    shape: BoxShape.rectangle),
                accountName: Text("Akshat"),
                accountEmail: Text("ak@gmail.com"),
                currentAccountPicture: CircleAvatar(
                  backgroundImage: AssetImage("assets/akshat.jpg"),
                ),
              ),
            ),
            ListTile(
              leading: Icon(Icons.art_track),
              title: const Text('My Arts'),
              onTap: () {
                Navigator.push(context,
                    MaterialPageRoute(builder: (context) => ArtScreen()));
              },
            ),
            Divider(
              color: Colors.grey,
            ),
            ListTile(
              leading: Icon(Icons.logout_rounded),
              title: const Text('Logout'),
              onTap: () {
                showDialog(
                    context: context,
                    builder: (context) {
                      return Container(
                        child: AlertDialog(
                          title: Text("Do you want to log out?"),
                          actions: [
                            ElevatedButton(
                                onPressed: () {
                                  FirebaseAuth.instance.signOut().then(
                                      (value) => {
                                            Navigator.push(
                                                context,
                                                MaterialPageRoute(
                                                    builder: (context) =>
                                                        SignInScreen()))
                                          });
                                },
                                child: Text("Yes")),
                            ElevatedButton(
                                onPressed: () {
                                  Navigator.pop(context);
                                },
                                child: Text("NO")),
                          ],
                        ),
                      );
                    });
              },
            ),
          ],
        ),
      ),
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        backgroundColor: hexStringToColor("5E61F4"),
        actions: [],
        centerTitle: true,
        title: const Text(
          "AI Image Generator",
          style: TextStyle(color: whiteColor),
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
          hexStringToColor("CB2B93"),
          hexStringToColor("9546C4"),
          hexStringToColor("5E61F4"),
        ], begin: Alignment.topCenter, end: Alignment.bottomCenter)),
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Column(children: [
            Expanded(
                child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                Row(
                  children: [
                    FloatingActionButton(
                        child: AvatarGlow(
                          endRadius: 75.0,
                          animate: isListen,
                          duration: Duration(milliseconds: 2000),
                          repeat: true,
                          showTwoGlows: true,
                          repeatPauseDuration: Duration(milliseconds: 100),
                          child: GestureDetector(
                            onTapDown: (details) async {
                              if (!isListen) {
                                var available = await speechToText.initialize();
                                if (available) {
                                  setState(() {
                                    isListen = true;
                                    speechToText.listen(onResult: (result) {
                                      setState(() {
                                        texController.text =
                                            result.recognizedWords;
                                      });
                                    });
                                  });
                                }
                              }
                            },
                            onTapUp: (details) {
                              setState(() {
                                isListen = false;
                              });
                              speechToText.stop();
                            },
                            child: CircleAvatar(
                              backgroundColor: btnColor,
                              child: Icon(
                                isListen ? Icons.mic : Icons.mic_none,
                                color: whiteColor,
                              ),
                            ),
                          ),
                        ),
                        backgroundColor: hexStringToColor("5E61F4"),
                        onPressed: () {}),
                    SizedBox(
                      width: 10,
                    ),
                    Expanded(
                      child: Container(
                        height: 44,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 4),
                        decoration: BoxDecoration(
                            color: whiteColor,
                            borderRadius: BorderRadius.circular(12)),
                        child: TextFormField(
                          controller: texController,
                          decoration: InputDecoration(
                              hintText: "Hold the mic or type!",
                              border: InputBorder.none),
                        ),
                      ),
                    ),
                    SizedBox(
                      width: 12,
                    ),
                    Container(
                      height: 44,
                      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                      decoration: BoxDecoration(
                          color: whiteColor,
                          borderRadius: BorderRadius.circular(12)),
                      child: DropdownButtonHideUnderline(
                          child: DropdownButton(
                        icon: const Icon(
                          size: 10,
                          Icons.expand_more,
                          color: btnColor,
                        ),
                        value: dropValue,
                        hint: Text("Select Size"),
                        items: List.generate(
                            sizes.length,
                            (index) => DropdownMenuItem(
                                  child: Text(sizes[index]),
                                  value: values[index],
                                )),
                        onChanged: (value) {
                          setState(() {
                            dropValue = value.toString();
                          });
                        },
                      )),
                    )
                  ],
                ),
                SizedBox(
                  width: 300,
                  height: 44,
                  child: ElevatedButton(
                    onPressed: () async {
                      if (texController.text.isNotEmpty &&
                          dropValue!.isNotEmpty) {
                        setState(() {
                          isLoaded = false;
                        });
                        image = await Api.generateImage(
                            texController.text, dropValue!);
                        setState(() {
                          isLoaded = true;
                        });
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                            content: Text(
                                "Please pass the querry and select the size")));
                      }
                    },
                    child: Text("Generate"),
                    style: ElevatedButton.styleFrom(
                        backgroundColor: hexStringToColor("5E61F4"),
                        shape: StadiumBorder()),
                  ),
                ),
              ],
            )),
            Expanded(
                flex: 4,
                child: isLoaded
                    ? Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                              clipBehavior: Clip.antiAlias,
                              decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(12)),
                              child: Screenshot(
                                  controller: screenshotController,
                                  child: Image.network(
                                    image,
                                    fit: BoxFit.contain,
                                  ))),
                          SizedBox(
                            height: 12,
                          ),
                          Row(
                            children: [
                              Expanded(
                                child: ElevatedButton.icon(
                                  icon: const Icon(
                                      Icons.download_for_offline_rounded),
                                  style: ElevatedButton.styleFrom(
                                    shape: ContinuousRectangleBorder(
                                        borderRadius:
                                            BorderRadius.circular(20)),
                                    elevation: 10,
                                    padding: const EdgeInsets.all(8),
                                    backgroundColor: hexStringToColor("CB2B93"),
                                  ),
                                  onPressed: () {
                                    downloadingImg();
                                  },
                                  label: const Text("Download"),
                                ),
                              ),
                              SizedBox(
                                width: 12,
                              ),
                              ElevatedButton.icon(
                                icon: const Icon(Icons.share),
                                style: ElevatedButton.styleFrom(
                                  shape: ContinuousRectangleBorder(
                                      borderRadius: BorderRadius.circular(20)),
                                  elevation: 10,
                                  padding: const EdgeInsets.all(8),
                                  backgroundColor: hexStringToColor("CB2B93"),
                                ),
                                onPressed: () async {
                                  await shareImage();

                                  ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(content: Text("Image Shared")));
                                },
                                label: const Text("Share"),
                              )
                            ],
                          )
                        ],
                      )
                    : Container(
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(12),
                            color: whiteColor),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Image.asset(
                              "assets/Iphone-spinner-2.gif",
                            ),
                            Text(
                              "Waiting for image to be generated...",
                              style: TextStyle(fontSize: 16.0),
                            )
                          ],
                        ),
                      )),
          ]),
        ),
      ),
    );
  }
}
